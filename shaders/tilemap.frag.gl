#version 450 core

uniform vec4 uniformColor = vec4(0,0,0,0);
uniform double time;
in vec2 uv;
out vec4 result;

#define U16 unsigned short
#define U8 unsigned char

struct Cell {
    U16 data;
    U16 fg; // 4 4 4 4
    U16 bg; // 4 4 4 4
    U8  flags;
    U8  stencil;
};

layout(std430) readonly buffer cells {
    Cell cellData[];
};

Cell defaultCell = Cell(
    U16(32),
    U16(0xFFFF),
    U16(0x0000),
    U8(0),
    U8(0)
);
Cell cursorCell = Cell(
    U16('_'),
    U16(0xFFFF),
    U16(0xF000),
    U8(0),
    U8(0)
);

struct TextBuf {
    vec2 screenCells; // size in screen cells
    vec2 screenOrigin; // this point on the screen corresponds with
    vec2 cellOrigin; // this point on the map
    vec2 fontSize; // scale the font sample in the cell
    vec2 fontOrigin;
    ivec2 bufferSize;
    ivec2 cursorPos;
    vec3 cursorColor;
};

uniform TextBuf buf;

struct FontDef {
    ivec2 pixelSize;
    ivec2 tileSize;
    ivec2 tileOrigin;
    ivec2 tileGap;
    ivec2 tileCount;
    sampler2D texture;
};

uniform FontDef font[8];

vec4 gamma(vec4 fragColor, float g) {
    vec4 result;
    result.r = pow(fragColor.r, g);
    result.g = pow(fragColor.g, g);
    result.b = pow(fragColor.b, g);
    result.a = fragColor.a;
    return result;
}

vec4 decodeColor(U16 c_) {
    int c = int(c_);
    float a = ((c >> 12) & 15) / 15.0f;
    float r = ((c >> 8) & 15) / 15.0f;
    float g = ((c >> 4) & 15) / 15.0f;
    float b = ((c >> 0) & 15) / 15.0f;
    return vec4(r,g,b,a);
}

vec4 sampleFont(uint data, vec2 frac) {
    uint tex = data >> 12;
    uint chr = data & 0xFFF;
    uvec2 tileCount = uvec2(font[tex].tileCount);
    uint m = uint(tileCount.x * tileCount.y - 1);
    chr = clamp(chr, 0, m);
    vec2 tile = vec2(uvec2(chr % tileCount.x, chr / tileCount.x));
    vec2 uv = (tile * (font[tex].tileSize + font[tex].tileGap) + font[tex].tileOrigin + frac * font[tex].tileSize) / font[tex].pixelSize;
    return textureLod(font[tex].texture, uv, 0);
}

Cell readScreenBuffer(vec2 pos) {
    if (pos.x < 0 || pos.y < 0 || pos.x >= buf.bufferSize.x + 1 || pos.y >= buf.bufferSize.y + 1) {
        return defaultCell;
    } else {
        return cellData[uint(pos.x) + uint(pos.y) * buf.bufferSize.x];
    }
}

vec4 decodeCell(Cell cell, vec2 frac) {
    vec4 font = sampleFont(uint(cell.data), frac);
    // The value alpha blends between the background and foreground
    // FG = 0xBG = 0x0FFF for alpha passthrough
    vec4 bg = decodeColor(cell.bg);
    vec4 fg = decodeColor(cell.fg);
    vec4 r = mix(bg, fg, vec4(font.a));
    r.rgb *= font.rgb;
    return r;
}

void main()
{
    vec2 cuv = (uv - buf.screenOrigin) * vec2(buf.screenCells) + buf.cellOrigin;
    vec2 pos = floor(cuv);
    vec2 frac = fract(cuv);
    frac = clamp(frac / buf.fontSize - buf.fontOrigin, 0, 1);
    Cell cell = readScreenBuffer(pos);
    result = decodeCell(cell, frac);
    if (uint(pos.x) == buf.cursorPos.x && uint(pos.y) == buf.cursorPos.y) {
        vec2 q = abs(frac - 0.5f);
        if (q.x > 0.4f || q.y > 0.4f) {
           float lim = sin(float(6.283f * fract(time))) * 0.5f + 0.5f;
 
            result = vec4(buf.cursorColor, lim);
        }
    }
}